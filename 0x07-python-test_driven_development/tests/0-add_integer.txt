check ```add_integer```
"""
 Test function that adds 2 integers.
- Prototype: def add_integer(a, b=98):
- a and b must be integers or floats, otherwise raise a TypeError exception with the message a must be an integer or b must be an integer
- a and b must be first casted to integers if they are float
- Returns an integer: the addition of a and b
- You are not allowed to import any module
"""
-----------------------
Checking docstring mod:
    >>> __import__('0-add_integer').__doc__ != None
    True

Import add_integer function:

    >>> add_integer = __import__('0-add_integer').add_integer

check functions docstring:

    >>> add_integer.__doc__ != None
    True

Basic use function:
    >>> add_integer(2, 1)
    3
    >>> add_integer(55, 43)
    98
    >>> add_integer(50, 50)
    100
    >>> add_integer(90, 8)
    98
    >>> add_integer(100)
    198

Basic use with negative numbers:

    >>> add_integer(-1, 2)
    1
    >>> add_integer(-3, -6)
    -9
    >>> add_integer(3, -2)
    1

Float use test:

    >>> add_integer(20.3)
    118
    >>> add_integer(10, 22.2)
    32

Float infinitive:

    >>> add_integer(float('inf'), 3)
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer

Pass String Chech arg 1 (a):

    >>> add_integer("Hello")
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Check 1 argument and numb:

    >>> add_integer("Hello", 1)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

    Traceback (most recent call last):
    >>> add_integer(0, "Hello")
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

Diferent that 2 arguments:

    >>> add_integer(0, 2, 3)
    Traceback (most recent call last):
    ...
    TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

Not arguments passed:

    >>> add_integer()
    Traceback (most recent call last):
    ...
    TypeError: add_integer() missing 1 required positional argument: 'a'

Argument None passed:
    >>> add_integer(None)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer
    